- Tests
- ADTs

- Recursive def's
- Mutually recursive def's

- Parse type tags
- Parse type vars

- Record type checking got messed up along with way:

  > def x(x) = x.x
  : { x : a } -> a

  > x({x = 1})
  = 1 : Int

  > x({y = 3})
  runtime error: RecordLookupError(Id(x),Record(Map(Id(y) -> Int(3))))


- Polymorphic types should grow:

  Currently they can be compared to a smaller type:
  > :type +(int_to_real(43), 3)
  : Real

  But until this expression is fully typed, the polymorphic should not be fully
  bound to Int and should be allowed to grow into a Real (because Real contains
  Int):
  > :type +(2, int_to_real(34))
  type error: UnificationError(IntType,RealType)


- Polymorphic types need proper covariance/contravariance checks:

  > import Prelude exposing (+, ref!, set!, get!, int_to_real)
  < ok

  > def int_ref = ref!(0)
  : Ref(Int)

  > def increment_int_ref(r) =
    set!(r, +(int_to_real(3), get!(r)))
  : Ref(Real) -> Ref(Real)

  > increment_int_ref(int_ref)
  = ref!(3.0) : Ref(Real)

  > increment_int_ref(int_ref)
  = ref!(6.0) : Ref(Real)
